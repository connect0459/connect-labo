import { component$, useSignal, $ } from "@builder.io/qwik";
import type { DocumentHead } from "@builder.io/qwik-city";

/**
 * Qwikのイベントハンドラセキュリティ検証コンポーネント
 *
 * このコンポーネントは、on:click属性に悪意のある値を埋め込まれた場合の
 * Qwikの挙動を検証するためのものです。
 */
export default component$(() => {
  const logMessage = useSignal<string[]>([]);

  // 正常なイベントハンドラ
  const normalClick$ = $(() => {
    logMessage.value = [...logMessage.value, "正常なクリックイベントが発火しました"];
    console.log("Normal click handler executed");
  });

  // ログをクリア
  const clearLog$ = $(() => {
    logMessage.value = [];
  });

  return (
    <div style="padding: 2rem; max-width: 1200px; margin: 0 auto;">
      <h1>Qwik イベントハンドラセキュリティ検証</h1>

      <div style="margin-bottom: 2rem;">
        <h2>検証の目的</h2>
        <p>
          Qwikのイベントハンドラ属性（<code>on:click</code>など）に悪意のある値を
          埋め込まれた場合の挙動を検証します。
        </p>
      </div>

      <div style="margin-bottom: 2rem;">
        <h2>テストケース</h2>

        {/* テストケース1: 正常なケース */}
        <div style="border: 1px solid #ccc; padding: 1rem; margin-bottom: 1rem; border-radius: 8px;">
          <h3>1. 正常なイベントハンドラ</h3>
          <p>通常のQwikイベントハンドラの動作を確認します。</p>
          <button onClick$={normalClick$} style="padding: 0.5rem 1rem; cursor: pointer;">
            正常なボタン
          </button>
        </div>

        {/* テストケース2: 手動で不正な属性を設定（dangerouslySetInnerHTMLを使用） */}
        <div style="border: 1px solid #ccc; padding: 1rem; margin-bottom: 1rem; border-radius: 8px; background-color: #fff3cd;">
          <h3>2. 存在しないファイルパスを指定</h3>
          <p>
            <code>on:click</code>属性に存在しないファイルパスを指定した場合の挙動を確認します。
          </p>
          <div dangerouslySetInnerHTML={`
            <button on:click="/non-existent-file#handleClick">
              存在しないファイルパスを指定したボタン
            </button>
          `}></div>
          <p style="font-size: 0.9rem; color: #856404; margin-top: 0.5rem;">
            ⚠️ この属性はHTMLとして挿入されますが、Qwikのイベントハンドラとしては機能しないはずです。
          </p>
        </div>

        {/* テストケース3: ディレクトリトラバーサルを試みる */}
        <div style="border: 1px solid #ccc; padding: 1rem; margin-bottom: 1rem; border-radius: 8px; background-color: #f8d7da;">
          <h3>3. ディレクトリトラバーサルを試みる</h3>
          <p>
            <code>on:click</code>属性にディレクトリトラバーサルを含むパスを指定した場合の挙動を確認します。
          </p>
          <div dangerouslySetInnerHTML={`
            <button on:click="../../../../etc/passwd#maliciousHandler">
              ディレクトリトラバーサルを試みるボタン
            </button>
          `}></div>
          <p style="font-size: 0.9rem; color: #721c24; margin-top: 0.5rem;">
            ⚠️ ディレクトリトラバーサル攻撃を試みるパターンです。
          </p>
        </div>

        {/* テストケース4: 悪意のあるイベントリスナー名 */}
        <div style="border: 1px solid #ccc; padding: 1rem; margin-bottom: 1rem; border-radius: 8px; background-color: #f8d7da;">
          <h3>4. 悪意のあるイベントリスナー名</h3>
          <p>
            <code>on:click</code>属性に特殊文字を含む悪意のあるイベントリスナー名を指定した場合の挙動を確認します。
          </p>
          <div dangerouslySetInnerHTML={`
            <button on:click="/malicious-file#eval(alert('XSS'))">
              悪意のあるイベントリスナー名を指定したボタン
            </button>
          `}></div>
          <p style="font-size: 0.9rem; color: #721c24; margin-top: 0.5rem;">
            ⚠️ XSSを試みるパターンです。
          </p>
        </div>

        {/* テストケース5: プロトコルハンドラを試みる */}
        <div style="border: 1px solid #ccc; padding: 1rem; margin-bottom: 1rem; border-radius: 8px; background-color: #f8d7da;">
          <h3>5. プロトコルハンドラを試みる</h3>
          <p>
            <code>on:click</code>属性にjavascript:プロトコルを指定した場合の挙動を確認します。
          </p>
          <div dangerouslySetInnerHTML={`
            <button on:click="javascript:alert('XSS')">
              javascript:プロトコルを試みるボタン
            </button>
          `}></div>
          <p style="font-size: 0.9rem; color: #721c24; margin-top: 0.5rem;">
            ⚠️ javascript:プロトコルを試みるパターンです。
          </p>
        </div>
      </div>

      {/* ログ表示エリア */}
      <div style="margin-top: 2rem;">
        <h2>実行ログ</h2>
        <button onClick$={clearLog$} style="padding: 0.5rem 1rem; margin-bottom: 1rem; cursor: pointer;">
          ログをクリア
        </button>
        <div style="border: 1px solid #ccc; padding: 1rem; background-color: #f5f5f5; min-height: 100px; font-family: monospace;">
          {logMessage.value.length === 0 ? (
            <p style="color: #999;">ログはありません</p>
          ) : (
            logMessage.value.map((msg, index) => (
              <div key={index} style="margin-bottom: 0.5rem;">
                {msg}
              </div>
            ))
          )}
        </div>
      </div>

      {/* 検証結果の説明 */}
      <div style="margin-top: 2rem; padding: 1rem; background-color: #e7f3ff; border-radius: 8px;">
        <h2>期待される挙動</h2>
        <ul>
          <li>正常なボタンはクリック時にログが表示されます</li>
          <li>不正な属性を持つボタンはクリックしても何も起こらないはずです</li>
          <li>Qwikはビルド時にイベントハンドラを解析するため、実行時の動的な属性挿入は機能しません</li>
          <li>dangerouslySetInnerHTMLで挿入された<code>on:click</code>属性は、Qwikのイベントハンドラとして認識されません</li>
        </ul>
      </div>

      {/* ブラウザコンソールの確認を促す */}
      <div style="margin-top: 1rem; padding: 1rem; background-color: #fff3cd; border-radius: 8px;">
        <h3>ブラウザコンソールを確認してください</h3>
        <p>
          不正なボタンをクリックした際に、エラーメッセージやネットワークリクエストが
          発生していないか確認してください。
        </p>
      </div>
    </div>
  );
});

export const head: DocumentHead = {
  title: "Qwik イベントハンドラセキュリティ検証",
  meta: [
    {
      name: "description",
      content: "Qwikのイベントハンドラのセキュリティ挙動を検証するページ",
    },
  ],
};
